{
	"scope": "source.php - variable.other.php",

	"completions":
	[
		//预定义常量
		"URL_COMMON",
		"URL_PATHINFO",
		"URL_REWRITE",
		"URL_COMPAT",
		"HAS_ONE",
		"BELONGS_TO",
		"HAS_MANY",
		"MANY_TO_MANY",
		"THINK_VERSION",
		//路径常量
		"THINK_PATH",
		"APP_PATH",
		"LIB_PATH",
		"CORE_PATH",
		"MODE_PATH",
		"BEHAVIOR_PATH",
		"COMMON_PATH",
		"VENDOR_PATH",
		"RUNTIME_PATH",
		"HTML_PATH",
		"CONF_PATH",
		"LANG_PATH",
		"LOG_PATH",
		"CACHE_PATH",
		"TEMP_PATH",
		"DATA_PATH",
		//系统常量
		"IS_CGI",
		"IS_WIN",
		"IS_CLI",
		"__ROOT__",
		"__APP__",
		"__MODULE__",
		"__CONTROLLER__",
		"__ACTION__",
		"__SELF__",
		"__INFO__",
		"__EXT__",
		"IS_GET",
		"IS_POST",
		"IS_PUT",
		"IS_DELETE",
		"IS_AJAX",
		"BIND_MODULE",
		"BIND_CONTROLLER",
		"BIND_ACTION",
		"APP_DEBUG",
		"APP_MODE",
		"APP_STATUS",
		"MODULE_NAME",
		"MODULE_PATH",
		"CONTROLLER_NAME",
		"ACTION_NAME",
		"STORAGE_TYPE",
		"MODULE_PATHINFO_DEPR",
		"MEMORY_LIMIT_ON",
		"RUNTIME_FILE",
		"THEME_NAME",
		"THEME_PATH",
		"LANG_SET",
		"MAGIC_QUOTES_GPC",
		"NOW_TIME",
		"REQUEST_METHOD",
		//项目中C函数默认获取到的所有配置键名
		"APP_USE_NAMESPACE",
		"APP_SUB_DOMAIN_DEPLOY",
		"APP_SUB_DOMAIN_RULES",
		"APP_DOMAIN_SUFFIX",
		"ACTION_SUFFIX",
		"MULTI_MODULE",
		"MODULE_DENY_LIST",
		"MODULE_ALLOW_LIST",
		"CONTROLLER_LEVEL",
		"APP_AUTOLOAD_LAYER",
		"APP_AUTOLOAD_PATH",
		//默认设定
		"DEFAULT_M_LAYER",
		"DEFAULT_C_LAYER",
		"DEFAULT_V_LAYER",
		"DEFAULT_LANG",
		"DEFAULT_THEME",
		"DEFAULT_MODULE",
		"DEFAULT_CONTROLLER",
		"DEFAULT_ACTION",
		"DEFAULT_CHARSET",
		"DEFAULT_TIMEZONE",
		"DEFAULT_AJAX_RETURN",
		"DEFAULT_JSONP_HANDLER",
		"DEFAULT_FILTER",
		//Cookie设置
		"COOKIE_EXPIRE",
		"COOKIE_DOMAIN",
		"COOKIE_PATH",
		"COOKIE_PREFIX",
		//数据库设置
		"DB_TYPE",
		"DB_HOST",
		"DB_NAME",
		"DB_USER",
		"DB_PWD",
		"DB_PORT",
		"DB_PREFIX",
		"DB_FIELDTYPE_CHECK",
		"DB_FIELDS_CACHE",
		"DB_CHARSET",
		"DB_DEPLOY_TYPE",
		"DB_RW_SEPARATE",
		"DB_MASTER_NUM",
		"DB_SLAVE_NO",
		"DB_SQL_BUILD_CACHE",
		"DB_SQL_BUILD_QUEUE",
		"DB_SQL_BUILD_LENGTH",
		"DB_SQL_LOG",
		"DB_BIND_PARAM",
		//数据缓存设置
		"DATA_CACHE_TIME",
		"DATA_CACHE_COMPRESS",
		"DATA_CACHE_CHECK",
		"DATA_CACHE_PREFIX",
		"DATA_CACHE_TYPE",
		"DATA_CACHE_PATH",
		"DATA_CACHE_SUBDIR",
		"DATA_PATH_LEVEL",
		//错误设置
		"ERROR_MESSAGE",
		"ERROR_PAGE",
		"SHOW_ERROR_MSG",
		"TRACE_MAX_RECORD",
		//日志设置
		"LOG_RECORD",
		"LOG_TYPE",
		"LOG_LEVEL",
		"LOG_EXCEPTION_RECORD",
		//SESSION设置
		"SESSION_AUTO_START",
		"SESSION_OPTIONS",
		"SESSION_TYPE",
		"SESSION_PREFIX",
		//模版引擎设置
		"TMPL_CONTENT_TYPE",
		"TMPL_ACTION_ERROR",
		"TMPL_ACTION_SUCCESS",
		"TMPL_EXCEPTION_FILE",
		"TMPL_DETECT_THEME",
		"TMPL_TEMPLATE_SUFFIX",
		"TMPL_FILE_DEPR",
		"TMPL_ENGINE_TYPE",
		"TMPL_CACHFILE_SUFFIX",
		"TMPL_DENY_FUNC_LIST",
		"TMPL_DENY_PHP",
		"TMPL_L_DELIM",
		"TMPL_R_DELIM",
		"TMPL_VAR_IDENTIFY",
		"TMPL_STRIP_SPACE",
		"TMPL_CACHE_ON",
		"TMPL_CACHE_PREFIX",
		"TMPL_CACHE_TIME",
		"TMPL_LAYOUT_ITEM",
		"LAYOUT_ON",
		"LAYOUT_NAME",
		//URL设置
		"URL_CASE_INSENSITIVE",
		"URL_MODEL",
		"URL_PATHINFO_DEPR",
		"URL_PATHINFO_FETCH",
		"URL_REQUEST_URI",
		"URL_HTML_SUFFIX",
		"URL_DENY_SUFFIX",
		"URL_PARAMS_BIND",
		"URL_PARAMS_BIND_TYPE",
		"URL_404_REDIRECT",
		"URL_ROUTER_ON",
		"URL_ROUTE_RULES",
		"URL_MAP_RULES",
		//系统变量名称设置
		"VAR_MODULE",
		"VAR_CONTROLLER",
		"VAR_ACTION",
		"VAR_AJAX_SUBMIT",
		"VAR_JSONP_HANDLER",
		"VAR_PATHINFO",
		"VAR_TEMPLATE",
		//其他设置
		"HTTP_CACHE_CONTROL",
		"CHECK_APP_DIR",
		"FILE_UPLOAD_TYPE",
		"DATA_CRYPT_TYPE",
		//前置后置
		{ "trigger": "_ad", "contents": "protected function _after_delete(\\$data,\\$options) {\n   ${1:}\n}$0" },
		{ "trigger": "_af", "contents": "protected function _after_find(&\\$result,\\$options) {\n  ${1:}\n}$0" },
		{ "trigger": "_ai", "contents": "protected function _after_insert(\\$data,\\$options) {\n   ${1:}\n}$0" },
		{ "trigger": "_as", "contents": "protected function _after_select(&\\$result,\\$options){\n	${1:foreach(\\$result as &\\$record)\\{\n		${2:\\$this->_after_find(\\$record,\\$options);}\n	\\}}\n}$0" },
		{ "trigger": "_au", "contents": "protected function _after_update(\\$data,\\$options) {\n   ${1:}\n}$0" },
		{ "trigger": "_bi", "contents": "protected function _before_insert(&\\$data,\\$options) {\n ${1:}\n}$0" },
		{ "trigger": "_bu", "contents": "protected function _before_update(&\\$data,\\$options) {\n ${1:}\n}$0" },
		//模型方法
		{ "trigger": "->flush", "contents": "->flush()$0" },
		{ "trigger": "->add", "contents": "->add(${1:\\$data})$0" },
		{ "trigger": "->addAll", "contents": "->addAll(\\$${1:dataList},\\$${2:options},\\$${3:replace})$0" },
		{ "trigger": "->save", "contents": "->save(${1:\\$data})$0" },
		{ "trigger": "->select", "contents": "->select()" },
		{ "trigger": "->selectAdd", "contents": "->selectAdd(\\$${1:fields},\\$${2:table}${3:,\\$options})$0" },
		{ "trigger": "->where", "contents": "->where('${1:}')$0" },
		{ "trigger": "->relation", "contents": "->relation(${1:true})" },
		{ "trigger": "->delete", "contents": "->delete('${1:}')$0" },
		{ "trigger": "->buildSql", "contents": "->buildSql()$0" },
		{ "trigger": "->find", "contents": "->find()$0" },
		{ "trigger": "->parseFieldsMap", "contents": "->parseFieldsMap(${1:\\$data},${2:\\$type})$0" },
		{ "trigger": "->setField", "contents": "->setField(${1:\\$field},${2:\\$value})$0" },
		{ "trigger": "->setInc", "contents": "->setInc(${1:\\$field},${2:\\$step})$0" },
		{ "trigger": "->setDec", "contents": "->setDec(${1:\\$field},${2:\\$step})$0" },
		{ "trigger": "->getField", "contents": "->getField(${1:\\$field})$0" },
		{ "trigger": "->create", "contents": "->create()$0" },
		{ "trigger": "->autoCheckToken", "contents": "->autoCheckToken()$0" },
		{ "trigger": "->regex", "contents": "->regex(${1:\\$value},${2:\\$rule})$0" },
		{ "trigger": "->check", "contents": "->check(${1:\\$value},${2:\\$rule},${3:\\$type='regex'})$0" },
		{ "trigger": "->query", "contents": "->query(${1:\\$sql})$0" },
		{ "trigger": "->execute", "contents": "->execute(${1:\\$sql})$0" },
		{ "trigger": "->db", "contents": "->db(${1:\\$linkNum},${2:\\$config})$0" },
		{ "trigger": "->getModelName", "contents": "->getModelName()$0" },
		{ "trigger": "->getTableName", "contents": "->getTableName()$0" },
		{ "trigger": "->startTrans", "contents": "->startTrans()$0" },
		{ "trigger": "->commit", "contents": "->commit()$0" },
		{ "trigger": "->rollback", "contents": "->rollback()$0" },
		{ "trigger": "->getError", "contents": "->getError()$0" },
		{ "trigger": "->getDbError", "contents": "->getDbError()$0" },
		{ "trigger": "->getLastInsID", "contents": "->getLastInsID()$0" },
		{ "trigger": "->getLastSql", "contents": "->getLastSql()$0" },
		{ "trigger": "->_sql", "contents": "->_sql()$0" },
		{ "trigger": "->getPk", "contents": "->getPk()$0" },
		{ "trigger": "->getDbFields", "contents": "->getDbFields()$0" },
		{ "trigger": "->data", "contents": "->data(${1:\\$data})$0" },
		{ "trigger": "->table", "contents": "->table(${1:\\$table})$0" },
		{ "trigger": "->join", "contents": "->join(${1:\\$join})$0" },
		{ "trigger": "->union", "contents": "->union(${1:\\$union})$0" },
		{ "trigger": "->cache", "contents": "->cache(${1:\\$key})$0" },
		{ "trigger": "->field", "contents": "->field(${1:\\$field})$0" },
		{ "trigger": "->scope", "contents": "->scope(${1:\\$scope})$0" },
		{ "trigger": "->limit", "contents": "->limit(${1:\\$limit})$0" },
		{ "trigger": "->page", "contents": "->page(${1:\\$page})$0" },
		{ "trigger": "->comment", "contents": "->comment(${1:\\$comment})$0" },
		{ "trigger": "->bind", "contents": "->bind(${1:\\$key})$0" },
		{ "trigger": "->setProperty", "contents": "->setProperty(${1:\\$name},${2:\\$value})$0" },
		{ "trigger": "->alias", "contents": "->alias('${1:}')$0" },
		{ "trigger": "->order", "contents": "->order('${1:}')$0" },
		{ "trigger": "->having", "contents": "->having('${1:}')$0" },
		{ "trigger": "->group", "contents": "->group('${1:}')$0" },
		{ "trigger": "->lock", "contents": "->lock('${1:}')$0" },
		{ "trigger": "->distinct", "contents": "->distinct('${1:}')$0" },
		{ "trigger": "->auto", "contents": "->auto('${1:}')$0" },
		{ "trigger": "->filter", "contents": "->filter('${1:}')$0" },
		{ "trigger": "->validate", "contents": "->validate('${1:}')$0" },
		{ "trigger": "->result", "contents": "->result('${1:}')$0" },
		{ "trigger": "->token", "contents": "->token('${1:}')$0" },
		{ "trigger": "->validate", "contents": "->filter('${1:}')$0" },
		{ "trigger": "->count", "contents": "->count('${1:}')$0" },
		{ "trigger": "->sum", "contents": "->sum('${1:}')$0" },
		{ "trigger": "->min", "contents": "->min('${1:}')$0" },
		{ "trigger": "->max", "contents": "->max('${1:}')$0" },
		{ "trigger": "->avg", "contents": "->avg('${1:}')$0" },
		{ "trigger": "->getField", "contents": "->getField(${1:\\$field},${2:\\$value})$0" },
		
		//控制器方法
		{ "trigger": "_empty", "contents": "\\$this->_empty();$0" },
		{ "trigger": "_get", "contents": "_get('${1:\\$name}');$0" },
		{ "trigger": "_post", "contents": "_post('${1:\\$name}');$0" },
		{ "trigger": "ajaxReturn", "contents": "\\$this->ajaxReturn(${1:\\$data},${2:\\$info},${3:\\$status},${4:\\$type});$0" },
		{ "trigger": "assign", "contents": "\\$this->assign('${1:name}',\\$${2:value});$0" },
		{ "trigger": "auto_charset()", "contents": "auto_charset(${1:\\$fContents}${2:,\\$from='gbk'}${3:,\\$to='utf-8'});$0" },
		{ "trigger": "build_count_rand()", "contents": "build_count_rand(${1:\\$num}${2:,\\$length=4}${3:,\\$mode=1});$0" },
		{ "trigger": "build_verify()", "contents": "build_verify(${1:\\$length=4}${2:\\$mode=1});$0" },
		{ "trigger": "byte_format()", "contents": "byte_format(${1:\\$size}${2:,\\$dec=2});$0" },
		{ "trigger": "cookie", "contents": "cookie(${1:\\$name}${2:,\\$value}${3:,\\$option});$0" },
		{ "trigger": "display", "contents": "\\$this->display(${1:});$0" },
		{ "trigger": "success", "contents": "\\$this->success('${1:info}');$0" },
		{ "trigger": "error", "contents": "\\$this->error('${1:name}');$0" },
		{ "trigger": "fetch", "contents": "\\$this->fetch('${1:}');$0" },
		{ "trigger": "redirect", "contents": "\\$this->redirect(${1:'\\$url'}${2:,\\$params}${3:,\\$delay}${4:,\\$msg});$0" },
		//请求判断
		{ "trigger": "isAjax()", "contents": "\\$this->isAjax()$0" },
		{ "trigger": "isDelete()", "contents": "\\$this->isDelete()$0" },
		{ "trigger": "isGet()", "contents": "\\$this->isGet()$0" },
		{ "trigger": "isHead()", "contents": "\\$this->isHead()$0" },
		{ "trigger": "isPost()", "contents": "\\$this->isPost()$0" },
		{ "trigger": "isPut()", "contents": "\\$this->isPut()$0" },
		{ "trigger": "is_utf8()", "contents": "is_utf8(${1:\\$string})$0" },
		{ "trigger": "is_ssl()", "contents": "is_ssl()$0" },

		{ "trigger": "A", "contents": "A(${1:\\$controller}, ${2:\\$action})$0" },
		{ "trigger": "B", "contents": "B('${1}')$0" },
		{ "trigger": "C", "contents": "C(${1:\\$name}, ${2:\\$value})$0" },
		{ "trigger": "D", "contents": "D(${1})$0" },
		{ "trigger": "E", "contents": "E(\\$msg)$0" },
		{ "trigger": "F", "contents": "F(${1:\\$name}, ${2:\\$value})$0" },
		{ "trigger": "G", "contents": "G(${1:\\$start},${2:\\$end})$0" },
		{ "trigger": "L", "contents": "L(${1:\\$name},${2:\\$value})$0" },
		{ "trigger": "R", "contents": "R(${1:'[项目://][分组/]模块/操作'},${2:\\$params})$0" },
		{ "trigger": "S", "contents": "S(${1:\\$name},${2:\\$value})$0" },
		{ "trigger": "T", "contents": "T(${1:\\$template},${2:\\$layer})$0" },
		{ "trigger": "I", "contents": "I(${1:\\$name},${2:\\$default})$0" },
		{ "trigger": "N", "contents": "N(${1:\\$key},${2:\\$step})$0" },
		{ "trigger": "U", "contents": "U(${1:\\$url})$0" },
		{ "trigger": "W", "contents": "W(${1:\\$name})$0" },
		{ "trigger": "session", "contents": "session(${1:\\$name}${2:,\\$value})$0" },
		{ "trigger": "cookie", "contents": "cookie(${1:\\$name}${2:,\\$value})$0" },
		{ "trigger": "dump", "contents": "dump('${1:str}')$0" },

		{ "trigger": "get_client_ip", "contents": "get_client_ip(${1:\\$type})$0" },
		{ "trigger": "load_config", "contents": "load_config(${1:\\$file})$0" },
		{ "trigger": "halt", "contents": "halt(${1:\\$error})$0" },
		{ "trigger": "highlight_code", "contents": "highlight_code(${1:\\$str}${2:,\\$show=false})$0" },

		{ "trigger": "layout", "contents": "layout(${1:\\$layout})$0" },
		{ "trigger": "list_search()", "contents": "list_search(${1:\\$list},${2:\\$condition})$0" },
		{ "trigger": "list_sort_by()", "contents": "list_sort_by(${1:\\$list},${2:\\$field}${3:,\\$sortby='asc'})$0" },
		{ "trigger": "list_to_tree()", "contents": "list_to_tree(${1:\\$list}${2:,\\$pk='id'}${3:,\\$pid='pid'}${4:,\\$child='_child'}${5:,\\$root=0})$0" },
		
		{ "trigger": "msubstr()", "contents": "msubstr(${1:\\$str},${2:0},${3:\\$length}${4:,\"utf-8\"}${5:,\\$suffix=true})$0" },
		{ "trigger": "rand_string()", "contents": "rand_string(${1:6}${2:,\\$type}${3:,\\$addStr})$0" },
		{ "trigger": "redirect", "contents": "redirect(${1:\\$url}${2:,\\$time}${3:,\\$msg})$0" },
		{ "trigger": "remove_xss()", "contents": "remove_xss(${1:\\$val})$0" },
		{ "trigger": "send_http_status", "contents": "send_http_status(${1:\\$code})$0" },
		{ "trigger": "startTrans()", "contents": "startTrans()$0" },
		{ "trigger": "switchModel()", "contents": "switchModel(\\$${1:type},\\$${2:var})$0" },
		{ "trigger": "throw_exception", "contents": "throw_exception(${1:\\$msg}${2:,\\$type}${3:,\\$code})$0" },
		{ "trigger": "ubb()", "contents": "ubb(${1:\\$text})$0" },
		{ "trigger": "_val", "contents": "protected \\$_validate = array(\n	array('verify','require','验证码必须！'), //默认情况下用正则进行验证\n	array('name','','帐号名称已经存在！',0,'unique',1), // 在新增的时候验证name字段是否唯一\n	array('value',array(1,2,3),'值的范围不正确！',2,'in'), // 当值不为空的时候判断是否在一个范围内\n	array('repassword','password','确认密码不正确',0,'confirm'), // 验证确认密码是否和密码一致\n	array('password','checkPwd','密码格式不正确',0,'function'), // 自定义函数验证密码格式\n);\n$0" },
		{ "trigger": "_auto", "contents": "protected \\$_auto = array (\n	array('status','1'),  // 新增的时候把status字段设置为1\n	array('password','md5',1,'function') , // 对password字段在新增的时候使md5函数处理\n	array('name','getName',1,'callback'), // 对name字段在新增的时候回调getName方法\n	array('create_time','time',2,'function'), // 对create_time字段在更新的时候写入当前时间戳\n);$0" },

		//常用模型判断
		{ "trigger": "Action", "contents": "\nClass ${1:Index}Action extends Action{\n  public function ${2:index}(){\n     ${3:}\n }\n}" },
		{ "trigger": "Model", "contents": "Class ${1:New}Model extends Model{\n	${2:}\n}$0" },
		{ "trigger": "RelationModel", "contents": "Class ${1:New}Model extends RelationModel{\n	protected \\$_link = array(${3:});${3:}\n}$0" },
		{ "trigger": "ViewModel", "contents": "Class ${1:New}Model extends ViewModel{\n	public \\$viewFields = array(\n		'ModelName'=>array(),\n	);${2:}\n}$0" },
		{ "trigger": "AdvModel", "contents": "Class ${1:New}Model extends AdvModel{\n	${2:}\n}$0" },
		{ "trigger": "Controller", "contents": "\nClass ${1:Index}Controller extends Controller{\n  public function ${2:index}(){\n     ${3:}\n }\n}" },
		{ "trigger": "TagLib", "contents": "Class ${1:New}Test extends TagLib{\n	protected \\$_tags = array(${2:});${3:}\n}$0" },
		{ "trigger": "Widget", "contents": "Class ${1:New}Widget extends Controller{\n	public function meau(){${2:}}${3:}\n}$0" },		
		{ "trigger": "ajaxData", "contents": "array('info'=>'${1:'操作失败'}','status'=>${2:0},'url'=>'${3:}')" }
	]
}